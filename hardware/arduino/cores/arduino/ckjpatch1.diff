diff -ru Wire0022/keywords.txt Wire0022patched/keywords.txt
--- Wire0022/keywords.txt	2010-12-11 21:58:23.000000000 -0500
+++ Wire0022patched/keywords.txt	2010-12-24 14:10:54.939789824 -0500
@@ -29,3 +29,5 @@
 # Constants (LITERAL1)
 #######################################
 
+STANDARD	LITERAL1
+FAST	LITERAL1
diff -ru Wire0022/utility/twi.c Wire0022patched/utility/twi.c
--- Wire0022/utility/twi.c	2010-12-11 21:58:23.000000000 -0500
+++ Wire0022patched/utility/twi.c	2010-12-24 16:44:53.935472302 -0500
@@ -53,6 +53,14 @@
 
 static volatile uint8_t twi_error;
 
+// Keep current baseline bit states for TWCR to which transient bits are or'ed
+// when setting TWCR.  This allows desired on-bits in TWCR to be altered by
+// functions rather than frozen in code. 
+// One might wish to alter TWCR setting TWEA off and prepare to go off-bus yet
+// complete the series of byte writes or reads on the twi without the code
+// handling those operations setting TWEA back on.
+static volatile uint8_t twi_twcr_base;
+
 /* 
  * Function twi_init
  * Desc     readys twi pins and sets twi bitrate
@@ -76,24 +84,18 @@
     sbi(PORTD, 1);
   #endif
 
-  // initialize twi prescaler and bit rate
-  cbi(TWSR, TWPS0);
-  cbi(TWSR, TWPS1);
-  TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2;
-
-  /* twi bit rate formula from atmega128 manual pg 204
-  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
-  note: TWBR should be 10 or higher for master mode
-  It is 72 for a 16mhz Wiring board with 100kHz TWI */
+  // set the twi clock rate for default bus speed
+  twi_setSpeed(TWI_FREQ);
 
   // enable twi module, acks, and twi interrupt
-  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
+  TWCR = twi_twcr_base = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
+
 }
 
 /* 
- * Function twi_slaveInit
- * Desc     sets slave address and enables interrupt
- * Input    none
+ * Function twi_setAddress
+ * Desc     sets slave address, relying on twi_init() to enable interrupt
+ * Input    address: 7bit i2c slave address we answer to
  * Output   none
  */
 void twi_setAddress(uint8_t address)
@@ -103,6 +105,34 @@
 }
 
 /* 
+ * Function twi_setSpeed
+ * Desc     sets twi hardware clock speed
+ * Input    bitsPerSecond: the speed (literals STANDARD, FAST also relevant)
+ * Output   the formerly set speed in bits per second
+ */
+
+long unsigned int twi_setSpeed(long unsigned int bitsPerSecond)
+{
+  /* twi bit rate formula from atmega128 manual pg 204
+  SCL Frequency = CPU Clock Frequency / (16 + (TWBR * 2 * prescale))
+  NOTE: TWBR should be 10 or higher for master mode
+  It is 72 for a 16mhz Wiring board with 100kHz TWI */
+
+  // calculate the former bit rate to return
+  uint8_t prescale = 1;
+  if (TWSR & _BV(TWPS0)) { prescale = prescale << 2; }
+  if (TWSR & _BV(TWPS1)) { prescale = prescale << 4; }
+  long unsigned int formerSpeed = (F_CPU / (16 + (TWBR * 2 * prescale)));
+
+  // initialize twi prescaler and bit rate
+  cbi(TWSR, TWPS0);  // both bits cleared yields prescaler value of 1
+  cbi(TWSR, TWPS1);
+  TWBR = ((F_CPU / bitsPerSecond) - 16) / 2;
+
+  return formerSpeed;
+ }
+
+/* 
  * Function twi_readFrom
  * Desc     attempts to become twi bus master and read a
  *          series of bytes from a device on the bus
@@ -137,12 +167,12 @@
   // received, causing that NACK to be sent in response to receiving the last
   // expected byte of data.
 
-  // build sla+w, slave device address + w bit
+  // build sla+r, slave device address + r bit
   twi_slarw = TW_READ;
   twi_slarw |= address << 1;
 
   // send start condition
-  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
+  TWCR = twi_twcr_base | _BV(TWINT) | _BV(TWSTA);
 
   // wait for read operation to complete
   while(TWI_MRX == twi_state){
@@ -205,7 +235,7 @@
   twi_slarw |= address << 1;
   
   // send start condition
-  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
+  TWCR = twi_twcr_base | _BV(TWINT) | _BV(TWSTA);
 
   // wait for write operation to complete
   while(wait && (TWI_MTX == twi_state)){
@@ -231,6 +261,10 @@
  * Output   1 length too long for buffer
  *          2 not slave transmitter
  *          0 ok
+ *
+ * NOTE: This function relies upon being called by twi_onSlaveTransmit handler,
+ *       itself called within the TWI interrupt handler such that the buffer
+ *       contents provided here will subsequently be transmitted.
  */
 uint8_t twi_transmit(uint8_t* data, uint8_t length)
 {
@@ -282,14 +316,19 @@
  * Desc     sends byte or readys receive line
  * Input    ack: byte indicating to ack or to nack
  * Output   none
+ * NOTE:    Write TWCR with TWINT bit, thus acknowledging it, which causes
+ *          the next logical TW operation to occur.  If TW is in MT or ST
+ *          mode and a byte loaded in TWDR it is transmitted.  Otherwise only
+ *          the ACK/NACK is sent per the 'ack' input.  The TWEN and TWIE bits
+ *          are on merely to keep them enabled.
  */
 void twi_reply(uint8_t ack)
 {
   // transmit master read ready signal, with or without ack
   if(ack){
-    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
+    TWCR = twi_twcr_base | _BV(TWINT) | _BV(TWEA);
   }else{
-	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
+    TWCR = (twi_twcr_base | _BV(TWINT)) & ~_BV(TWEA);
   }
 }
 
@@ -302,9 +341,9 @@
 void twi_stop(void)
 {
   // send stop condition
-  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
+  TWCR = twi_twcr_base | _BV(TWINT) | _BV(TWSTO);
 
-  // wait for stop condition to be exectued on bus
+  // wait for stop condition to be executed on bus
   // TWINT is not set after a stop condition!
   while(TWCR & _BV(TWSTO)){
     continue;
@@ -322,16 +361,16 @@
  */
 void twi_releaseBus(void)
 {
-  // release bus
-  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
+  // release bus by acknowledging TWINT bit.
+  TWCR = twi_twcr_base | _BV(TWINT);
 
   // update twi state
   twi_state = TWI_READY;
 }
 
-SIGNAL(TWI_vect)
+ISR(TWI_vect)
 {
-  switch(TW_STATUS){
+  switch(TW_STATUS){   // TWSR with prescaler bits masked
     // All Master
     case TW_START:     // sent start condition
     case TW_REP_START: // sent repeated start condition
diff -ru Wire0022/utility/twi.h Wire0022patched/utility/twi.h
--- Wire0022/utility/twi.h	2010-12-11 21:58:23.000000000 -0500
+++ Wire0022patched/utility/twi.h	2010-12-24 15:17:51.650820162 -0500
@@ -24,9 +24,11 @@
 
   //#define ATMEGA8
 
-  #ifndef CPU_FREQ
-  #define CPU_FREQ 16000000L
-  #endif
+/* Using F_CPU instead
+ *  #ifndef CPU_FREQ
+ *  #define CPU_FREQ 16000000L
+ *  #endif
+ */
 
   #ifndef TWI_FREQ
   #define TWI_FREQ 100000L
@@ -44,6 +46,7 @@
   
   void twi_init(void);
   void twi_setAddress(uint8_t);
+  long unsigned int twi_setSpeed(long unsigned int);
   uint8_t twi_readFrom(uint8_t, uint8_t*, uint8_t);
   uint8_t twi_writeTo(uint8_t, uint8_t*, uint8_t, uint8_t);
   uint8_t twi_transmit(uint8_t*, uint8_t);
diff -ru Wire0022/Wire.cpp Wire0022patched/Wire.cpp
--- Wire0022/Wire.cpp	2010-12-11 21:58:23.000000000 -0500
+++ Wire0022patched/Wire.cpp	2010-12-24 15:20:28.472280809 -0500
@@ -73,6 +73,12 @@
   begin((uint8_t)address);
 }
 
+long unsigned int TwoWire::setSpeed(long unsigned int bitsPerSecond)
+{
+  return twi_setSpeed(bitsPerSecond);
+}
+
+
 uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
 {
   // clamp to buffer length
diff -ru Wire0022/Wire.h Wire0022patched/Wire.h
--- Wire0022/Wire.h	2010-12-11 21:58:22.000000000 -0500
+++ Wire0022patched/Wire.h	2010-12-24 15:22:53.376720774 -0500
@@ -24,6 +24,9 @@
 
 #define BUFFER_LENGTH 32
 
+#define STANDARD 100000L
+#define FAST 400000L
+
 class TwoWire
 {
   private:
@@ -46,6 +49,7 @@
     void begin();
     void begin(uint8_t);
     void begin(int);
+    long unsigned int setSpeed(long unsigned int);
     void beginTransmission(uint8_t);
     void beginTransmission(int);
     uint8_t endTransmission(void);
